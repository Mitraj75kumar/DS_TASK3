import pandas as pd
import zipfile
import os
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import matplotlib.pyplot as plt

# File path
zip_path = r"C:\Users\mitra\Downloads\archive.zip"

def extract_and_load_data(zip_path):
    """Extract and load the dataset from the zip file"""
    try:
        with zipfile.ZipFile(zip_path, 'r') as zip_ref:
            # Print files in zip for debugging
            print("Files in zip archive:")
            for file in zip_ref.namelist():
                print(f"- {file}")
            
            # Find the first CSV file that's not in __MACOSX directory
            csv_file = None
            for file in zip_ref.namelist():
                if file.endswith('.csv') and not file.startswith('__MACOSX/'):
                    csv_file = file
                    break
            
            if not csv_file:
                raise ValueError("No CSV file found in the zip archive")
            
            print(f"\nFound CSV file: {csv_file}")
            
            # Extract to temporary directory
            temp_dir = "temp_bank_data"
            os.makedirs(temp_dir, exist_ok=True)
            zip_ref.extract(csv_file, temp_dir)
            
            # Load the CSV file
            extracted_path = os.path.join(temp_dir, csv_file)
            
            # Try different delimiters
            for sep in [';', ',', '\t']:
                try:
                    df = pd.read_csv(extracted_path, sep=sep)
                    if len(df.columns) > 1:  # Valid delimiter found
                        print(f"Successfully read with delimiter: '{sep}'")
                        break
                except:
                    continue
            
            print("\nFirst 5 rows of the dataset:")
            print(df.head())
            
            return df
            
    except Exception as e:
        print(f"\nError loading dataset: {e}")
        return None

def preprocess_data(df):
    """Preprocess the data with comprehensive checks"""
    if df is None:
        return None, None, None, None
    
    print("\nPreprocessing data...")
    
    # Check if target variable exists
    target_col = None
    possible_targets = ['y', 'deposit', 'subscription', 'target', 'class', 'response']
    
    for col in possible_targets:
        if col in df.columns:
            target_col = col
            break
    
    if not target_col:
        # Try to find a binary column that might be the target
        for col in df.columns:
            if df[col].nunique() == 2:
                unique_values = sorted(df[col].dropna().unique())
                if set(unique_values) in [{'yes', 'no'}, {'y', 'n'}, {0, 1}, {'0', '1'}, {'t', 'f'}]:
                    target_col = col
                    break
    
    if not target_col:
        # If still not found, use the last column as target (common convention)
        target_col = df.columns[-1]
        print(f"\nWarning: Using last column '{target_col}' as target variable")
    
    print(f"\nUsing '{target_col}' as target variable")
    
    # Convert target variable
    df[target_col] = df[target_col].astype(str).str.lower().map({
        'yes': 1, 'no': 0, 'y': 1, 'n': 0, '1': 1, '0': 0, 'true': 1, 'false': 0
    }).astype(int)
    
    # Handle categorical variables
    categorical_cols = ['job', 'marital', 'education', 'default', 'housing', 
                       'loan', 'contact', 'month', 'day_of_week', 'poutcome']
    
    # Only encode columns that exist in the dataframe
    categorical_cols = [col for col in categorical_cols if col in df.columns]
    
    print(f"\nEncoding categorical variables: {categorical_cols}")
    
    for col in categorical_cols:
        le = LabelEncoder()
        df[col] = le.fit_transform(df[col].astype(str))
    
    # Handle missing values if any
    if df.isnull().sum().sum() > 0:
        print("\nHandling missing values...")
        df = df.fillna(df.mode().iloc[0])
    
    X = df.drop(target_col, axis=1)
    y = df[target_col]
    
    # Split data
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.3, random_state=42, stratify=y)
    
    print("\nData split complete:")
    print(f"- Training samples: {len(X_train)}")
    print(f"- Test samples: {len(X_test)}")
    print(f"- Class distribution: {pd.Series(y).value_counts(normalize=True).to_dict()}")
    
    return X_train, X_test, y_train, y_test

def train_and_evaluate(X_train, X_test, y_train, y_test):
    """Train and evaluate the decision tree model with comprehensive metrics"""
    if X_train is None:
        return None
    
    print("\nTraining Decision Tree Classifier...")
    
    # Initialize and train classifier
    dt_classifier = DecisionTreeClassifier(
        max_depth=5,
        min_samples_split=10,
        min_samples_leaf=5,
        random_state=42,
        class_weight='balanced'  # Handle class imbalance
    )
    
    dt_classifier.fit(X_train, y_train)
    
    # Evaluate
    y_pred = dt_classifier.predict(X_test)
    
    print("\nModel Evaluation:")
    print(f"Accuracy: {accuracy_score(y_test, y_pred):.4f}")
    print("\nClassification Report:")
    print(classification_report(y_test, y_pred))
    print("\nConfusion Matrix:")
    print(confusion_matrix(y_test, y_pred))
    
    # Feature importance
    feature_importance = pd.DataFrame({
        'Feature': X_train.columns,
        'Importance': dt_classifier.feature_importances_
    }).sort_values('Importance', ascending=False)
    
    print("\nFeature Importance:")
    print(feature_importance.head(10))
    
    return dt_classifier

def visualize_results(dt_classifier, X_train):
    """Visualize the decision tree and feature importance"""
    if dt_classifier is None:
        return
    
    # Plot decision tree
    plt.figure(figsize=(25, 15))
    plot_tree(
        dt_classifier,
        filled=True,
        rounded=True,
        feature_names=X_train.columns,
        class_names=['No', 'Yes'],
        max_depth=3,
        fontsize=10,
        proportion=True
    )
    plt.title("Decision Tree (First 3 Levels)", fontsize=20)
    plt.show()
    
    # Plot feature importance
    feature_importance = pd.DataFrame({
        'Feature': X_train.columns,
        'Importance': dt_classifier.feature_importances_
    }).sort_values('Importance', ascending=False).head(10)
    
    plt.figure(figsize=(12, 8))
    plt.barh(feature_importance['Feature'], feature_importance['Importance'])
    plt.xlabel('Importance')
    plt.title('Top 10 Feature Importance')
    plt.gca().invert_yaxis()
    plt.show()

def main():
    print("Starting bank marketing campaign analysis...")
    
    try:
        # Load data
        print("\nStep 1: Loading data...")
        df = extract_and_load_data(zip_path)
        
        if df is not None:
            # Preprocess
            print("\nStep 2: Preprocessing data...")
            X_train, X_test, y_train, y_test = preprocess_data(df)
            
            # Train and evaluate
            print("\nStep 3: Training model...")
            dt_classifier = train_and_evaluate(X_train, X_test, y_train, y_test)
            
            # Visualize
            if dt_classifier is not None:
                print("\nStep 4: Visualizing results...")
                visualize_results(dt_classifier, X_train)
            
            # Clean up temporary files
            temp_dir = "temp_bank_data"
            if os.path.exists(temp_dir):
                for root, dirs, files in os.walk(temp_dir, topdown=False):
                    for name in files:
                        os.remove(os.path.join(root, name))
                    for name in dirs:
                        os.rmdir(os.path.join(root, name))
                os.rmdir(temp_dir)
                print("\nTemporary files cleaned up")
            
            print("\nAnalysis complete!")
    
    except Exception as e:
        print(f"\nAn error occurred: {e}")
        print("Please check the input data and try again.")

if __name__ == "__main__":
    main()
